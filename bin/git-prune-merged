#!/usr/bin/env bash

# https://github.com/git/git/blob/master/git-rebase.sh
remote="origin"
mainBranch=$(git config branch.default)
if [ -z "$mainBranch" ]; then
  mainBranch="main"
  if ! git show-ref --quiet "$remote/$mainBranch" && git show-ref --quiet "$remote/master"; then
    mainBranch="master"
  fi
fi
target=$mainBranch
remoteTarget="$remote/$target"
OPTIONS_STUCKLONG=t
OPTIONS_KEEPDASHDASH=
OPTIONS_SPEC="\
git prune-merged [options] [<target-branch>]
--
 check out target branch (default $remoteTarget), delete all\
 merged branches.

 Target branch can be passed as parameter or specified in target branch\
 through git upload [<target-branch>].

 Available options are
s,sync!                 fetch $remoteTarget and prune $remote before checkout
"

# https://www.kernel.org/pub/software/scm/git/docs/git-sh-setup.html
. "$(git --exec-path)/git-sh-setup"

total_argc=$#
while test $# != 0
do
    case "$1" in
    --sync)  sync=true;;
    --)
        shift
        break
        ;;
    esac
    shift
done

# Max 1 positional arguments
test $# -gt 1 && usage

currentBranch=$(git symbolic-ref --quiet --short HEAD 2> /dev/null)

set -e # Exit on error

trackingBranch=`git rev-parse --abbrev-ref --symbolic-full-name @{upstream} 2> /dev/null | sed "s/$remote\///"`
targetPattern="/target=([^/]+)/"
if [[ $trackingBranch =~ $targetPattern ]] ; then
  target="${BASH_REMATCH[1]}"
fi

target=${1:-$target}
remoteTarget="$remote/$target"

if [ "$sync" = true ] ; then
    echo about sync remote
    git fetch $remote $target
    git remote prune origin
    echo
fi

# Prune
# https://stackoverflow.com/a/6127884/1020871
git checkout $remoteTarget
echo
echo about to prune merged branches
git branch --merged | egrep -v "(^\*|^\s+$mainBranch$)" | xargs -I {} bash -c 'if [[ -n "{}" ]]; then git branch -d "{}"; fi'

if [[ -n $currentBranch ]] && git rev-parse --verify --quiet $currentBranch 2>&1 >/dev/null; then
    echo
    echo "check out $currentBranch since it was not prunned"
    git checkout $currentBranch --quiet
fi
